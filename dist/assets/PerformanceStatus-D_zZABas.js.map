{"version":3,"file":"PerformanceStatus-D_zZABas.js","sources":["../../src/hooks/usePerformanceMonitor.js","../../src/components/PerformanceStatus.jsx"],"sourcesContent":["import { useEffect, useCallback, useRef } from 'react';\nimport { onCLS, onFID, onFCP, onLCP, onTTFB } from 'web-vitals';\nimport { isDevelopment } from '../constants';\n\n// Singleton pattern to prevent multiple listeners\nlet listenersRegistered = false;\nconst performanceCallbacks = new Set();\n\n/**\n * Register web-vitals listeners only once across the entire application\n * Uses singleton pattern to prevent multiple registrations\n */\nconst registerWebVitalsListeners = () => {\n  if (listenersRegistered) return;\n  \n  /**\n   * Report a web vital metric to all registered callbacks\n   * @param {Object} metric - Web vital metric object\n   * @param {string} metric.name - Metric name (CLS, FID, FCP, LCP, TTFB)\n   * @param {number} metric.value - Metric value\n   * @param {string} [metric.rating] - Performance rating\n   */\n  const reportWebVital = (metric) => {\n    // Call all registered callbacks\n    performanceCallbacks.forEach(callback => {\n      try {\n        callback(metric);\n      } catch (error) {\n        console.error('Error in performance callback:', error);\n      }\n    });\n  };\n\n  // Register listeners only once\n  onCLS(reportWebVital);\n  onFID(reportWebVital);\n  onFCP(reportWebVital);\n  onLCP(reportWebVital);\n  onTTFB(reportWebVital);\n  \n  listenersRegistered = true;\n  \n  if (isDevelopment) {\n    console.warn('ðŸš€ Web Vitals listeners registered once');\n  }\n};\n\n/**\n * Custom hook for monitoring Web Vitals performance metrics\n * \n * Features:\n * - Singleton pattern to prevent multiple listener registrations\n * - Automatic cleanup on component unmount\n * - Support for multiple components using the same hook\n * - Development logging for debugging\n * \n * @param {Function} callback - Function to call when a metric is received\n * @param {Object} callback.metric - Web vital metric object\n * @param {string} callback.metric.name - Metric name\n * @param {number} callback.metric.value - Metric value\n * @param {string} [callback.metric.rating] - Performance rating\n * \n * @example\n * ```jsx\n * function MyComponent() {\n *   usePerformanceMonitor((metric) => {\n *     console.log(`${metric.name}: ${metric.value}`);\n *   });\n *   return <div>Component with performance monitoring</div>;\n * }\n * ```\n */\nconst usePerformanceMonitor = (callback) => {\n  const registeredRef = useRef(false);\n\n  // Memoize the callback to prevent infinite re-registrations\n  const memoizedCallback = useCallback((metric) => {\n    if (!callback || typeof callback !== 'function') return;\n    \n    // Prevent duplicate metric reports for the same metric type\n    if (registeredRef.current) {\n      callback(metric);\n    }\n    \n    // Log to console in development (only once per metric)\n    if (isDevelopment) {\n      console.warn(`${metric.name}: ${metric.value}${metric.rating ? ` (${metric.rating})` : ''}`);\n    }\n  }, [callback]);\n\n  useEffect(() => {\n    // Prevent registering the same callback multiple times\n    if (registeredRef.current) return;\n    \n    // Register this component's callback\n    if (memoizedCallback) {\n      performanceCallbacks.add(memoizedCallback);\n    }\n    \n    // Register global listeners (singleton)\n    registerWebVitalsListeners();\n    \n    registeredRef.current = true;\n\n    // Cleanup: remove this component's callback when unmounting\n    return () => {\n      if (memoizedCallback) {\n        performanceCallbacks.delete(memoizedCallback);\n      }\n      registeredRef.current = false;\n    };\n  }, [memoizedCallback]);\n};\n\nexport default usePerformanceMonitor; \n","import React, { useState } from 'react';\nimport { usePerformanceMonitor } from '@hooks';\nimport { LOADING_MESSAGES, RATING_COLORS } from '../constants';\n\n/**\n * PerformanceStatus Component\n * \n * Displays real-time Web Vitals performance metrics\n * Features:\n * - Real-time metric updates\n * - Color-coded performance ratings\n * - Deduplication to prevent infinite loops\n * \n * @returns {JSX.Element} Performance monitoring display\n */\nconst PerformanceStatus = () => {\n  const [metrics, setMetrics] = useState(new Map());\n\n  // Monitor performance with our custom hook (without console logging)\n  usePerformanceMonitor((metric) => {\n    setMetrics(prev => {\n      const newMetrics = new Map(prev);\n      newMetrics.set(metric.name, {\n        value: metric.value,\n        rating: metric.rating,\n        timestamp: Date.now()\n      });\n      return newMetrics;\n    });\n  });\n\n  const metricsArray = Array.from(metrics.entries()).map(([name, data]) => ({\n    name,\n    ...data\n  }));\n\n  /**\n   * Get background color for performance rating\n   * @param {string} rating - Performance rating (good, needs-improvement, poor)\n   * @returns {string} Color hex code\n   */\n  const getRatingColor = (rating) => RATING_COLORS[rating] || RATING_COLORS.poor;\n\n  return (\n    <div style={{ \n      background: 'rgba(255, 255, 255, 0.1)', \n      padding: '1rem', \n      borderRadius: '8px',\n      marginTop: '1rem'\n    }}>\n      <h4>ðŸš€ Web Vitals Monitor (Live)</h4>\n      {metricsArray.length === 0 ? (\n        <p>{LOADING_MESSAGES.METRICS}</p>\n      ) : (\n        <ul style={{ textAlign: 'left', fontSize: '0.9rem' }}>\n          {metricsArray.map((metric) => (\n            <li key={metric.name}>\n              <strong>{metric.name}:</strong> {metric.value.toFixed(2)}ms\n              {metric.rating && (\n                <span style={{ \n                  marginLeft: '0.5rem',\n                  padding: '0.2rem 0.4rem',\n                  borderRadius: '4px',\n                  fontSize: '0.8rem',\n                  backgroundColor: getRatingColor(metric.rating),\n                  color: 'white'\n                }}>\n                  {metric.rating}\n                </span>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n      <p style={{ fontSize: '0.8rem', opacity: 0.8, marginTop: '0.5rem' }}>\n        âœ… Web Vitals 4.2.4 - Sin duplicaciones | MÃ©tricas Ãºnicas: {metricsArray.length}\n      </p>\n    </div>\n  );\n};\n\nexport default React.memo(PerformanceStatus); \n"],"names":["listenersRegistered","performanceCallbacks","registerWebVitalsListeners","reportWebVital","metric","callback","error","onCLS","onFID","onFCP","onLCP","onTTFB","usePerformanceMonitor","registeredRef","useRef","memoizedCallback","useCallback","useEffect","PerformanceStatus","metrics","setMetrics","useState","prev","newMetrics","metricsArray","name","data","getRatingColor","rating","RATING_COLORS","jsxDEV","this","PerformanceStatus$1","React"],"mappings":"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"}